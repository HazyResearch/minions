# Multi-stage build for minimal Docker image
FROM python:3.11-alpine AS builder

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Install build dependencies including Rust for tiktoken
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    git \
    rust \
    cargo

# Set working directory
WORKDIR /app

# Upgrade pip and install minimal Python dependencies
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --user \
    flask>=2.0.0 \
    flask-cors>=3.0.0 \
    gunicorn>=20.0.0 \
    requests>=2.25.0 \
    openai>=1.0.0 \
    tiktoken>=0.4.0 \
    mcp>=1.0.0 \
    aiohttp>=3.8.0

# Runtime stage
FROM python:3.11-alpine AS runtime

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH="/root/.local/bin:$PATH"

# Install runtime dependencies including libgcc for tiktoken
RUN apk add --no-cache curl libgcc

# Set working directory
WORKDIR /app

# Copy Python packages from builder stage
COPY --from=builder /root/.local /root/.local

# Copy only the necessary minions modules
COPY minions/__init__.py ./minions/
COPY minions/usage.py ./minions/
COPY minions/minion.py ./minions/
COPY minions/clients/base.py ./minions/clients/
COPY minions/clients/docker_model_runner.py ./minions/clients/
COPY minions/clients/openai.py ./minions/clients/
COPY minions/prompts/__init__.py ./minions/prompts/
COPY minions/prompts/minion.py ./minions/prompts/
COPY minions/prompts/minion_mcp.py ./minions/prompts/
COPY minions/prompts/multi_turn.py ./minions/prompts/
COPY minions/utils/__init__.py ./minions/utils/
COPY minions/utils/conversation_history.py ./minions/utils/

# Copy minimal clients __init__.py with only the clients we need
COPY apps/minions-docker/clients_init_minimal.py ./minions/clients/__init__.py

# Create stub files for optional MCP functionality
RUN mkdir -p ./minions && \
    echo "# Stub for MCP functionality - not available in minimal build" > ./minions/minions_mcp.py && \
    echo "class SyncMCPClient: pass" >> ./minions/minions_mcp.py

# Copy the Docker app files
COPY apps/minions-docker/minion_http_server.py ./

# Create log directory
RUN mkdir -p minion_logs

# Expose port
EXPOSE 5000

# Environment variables with defaults
ENV REMOTE_MODEL_NAME="gpt-4o-mini"
ENV LOCAL_MODEL_NAME="ai/smollm2"
ENV LOCAL_BASE_URL="http://model-runner.docker.internal/engines/llama.cpp/v1"
ENV REMOTE_BASE_URL="http://model-runner.docker.internal/engines/openai/v1"
ENV MAX_ROUNDS="3"
ENV LOG_DIR="minion_logs"
ENV TIMEOUT="60"
ENV HOST="0.0.0.0"
ENV PORT="5000"

# Add the app root to Python path so minions package can be imported
ENV PYTHONPATH="/app:$PYTHONPATH"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Create entrypoint script
RUN printf '#!/bin/sh\n\
echo "Starting Minion HTTP Server..."\n\
echo "Configuration:"\n\
echo "  REMOTE_MODEL_NAME: $REMOTE_MODEL_NAME"\n\
echo "  LOCAL_MODEL_NAME: $LOCAL_MODEL_NAME"\n\
echo "  LOCAL_BASE_URL: $LOCAL_BASE_URL"\n\
echo "  REMOTE_BASE_URL: $REMOTE_BASE_URL"\n\
echo "  MAX_ROUNDS: $MAX_ROUNDS"\n\
echo "  TIMEOUT: $TIMEOUT"\n\
echo "  HOST: $HOST"\n\
echo "  PORT: $PORT"\n\
echo "  LOG_DIR: $LOG_DIR"\n\
echo ""\n\
if [ "$PRODUCTION" = "true" ]; then\n\
    echo "Running in production mode with gunicorn..."\n\
    exec gunicorn --bind $HOST:$PORT --workers 1 --timeout $TIMEOUT --worker-class sync minion_http_server:app\n\
else\n\
    echo "Running in development mode with Flask..."\n\
    exec python minion_http_server.py\n\
fi\n' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Use the entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]
